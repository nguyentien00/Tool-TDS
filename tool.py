import os
import requests
import json
import time
from colorama import init, Fore

# Kh·ªüi t·∫°o colorama
init(autoreset=True)

# Khai b√°o c·∫•u h√¨nh v√† global variables
API_KEY = None
COOKIES = {"facebook": "", "instagram": "", "tiktok": ""}
USER_NAME = None
BASE_URL = "https://traodoisub.com/api/"
TASK_TYPES = {
    "facebook": ["like", "follow", "share", "comment"],
    "instagram": ["follow", "like", "comment"],
    "tiktok": ["follow", "like"]
}

# Danh s√°ch c·∫•u h√¨nh ƒë√£ l∆∞u
configurations = []

# H√†m l·∫•y t√™n ng∆∞·ªùi d√πng t·ª´ API
def get_username(api_key):
    url = f"{BASE_URL}?access_token={api_key}"
    response = requests.get(url)
    if response.status_code == 200:
        try:
            data = response.json()
            return data.get("name", "Kh√¥ng t√™n")
        except requests.exceptions.JSONDecodeError:
            print(Fore.RED + "L·ªói khi nh·∫≠n t√™n ng∆∞·ªùi d√πng.")
            return None
    else:
        print(Fore.RED + f"L·ªói API: {response.status_code}")
        return None

# H√†m ki·ªÉm tra c·∫•u h√¨nh (Access Token v√† Cookies)
def check_config():
    global API_KEY, COOKIES
    if not API_KEY:
        print(Fore.RED + "‚ö†Ô∏è B·∫°n ch∆∞a nh·∫≠p API Key. Vui l√≤ng nh·∫≠p l·∫°i.")
        return False
    for platform in COOKIES:
        if not COOKIES[platform]:
            print(Fore.RED + f"‚ö†Ô∏è B·∫°n ch∆∞a nh·∫≠p cookie cho {platform}. Vui l√≤ng nh·∫≠p l·∫°i.")
            return False
    return True

# H√†m l·∫•y danh s√°ch nhi·ªám v·ª•
def get_tasks(task_type):
    url = f"{BASE_URL}?fields={task_type}&access_token={API_KEY}"
    print(Fore.YELLOW + f"üîÑ ƒêang l·∫•y nhi·ªám v·ª• lo·∫°i {task_type}...")

    try:
        response = requests.get(url, cookies=COOKIES)
        if response.status_code == 200:
            try:
                tasks = response.json()
                if isinstance(tasks, list):  # Ki·ªÉm tra n·∫øu d·ªØ li·ªáu l√† danh s√°ch
                    return tasks
                else:
                    print(Fore.RED + f"Kh√¥ng c√≥ nhi·ªám v·ª• {task_type} n√†o!")
                    return []
            except requests.exceptions.JSONDecodeError:
                print(Fore.RED + "L·ªói: Ph·∫£n h·ªìi kh√¥ng ph·∫£i JSON. N·ªôi dung nh·∫≠n ƒë∆∞·ª£c l√†:")
                print(Fore.YELLOW + response.text)
                return []
        else:
            print(Fore.RED + f"L·ªói khi l·∫•y nhi·ªám v·ª• {task_type}: {response.status_code}, {response.text}")
            return []
    except Exception as e:
        print(Fore.RED + f"L·ªói k·∫øt n·ªëi khi l·∫•y nhi·ªám v·ª•: {str(e)}")
        return []

# H√†m th·ª±c hi·ªán nhi·ªám v·ª•
def perform_task(task_id, task_type):
    url = f"{BASE_URL}?fields={task_type}_success&id={task_id}&access_token={API_KEY}"
    try:
        response = requests.get(url, cookies=COOKIES)
        if response.status_code == 200:
            try:
                result = response.json()
                if result.get("success"):
                    print(Fore.GREEN + f"‚úÖ Ho√†n th√†nh nhi·ªám v·ª• {task_id} - {task_type}!")
                    print(Fore.CYAN + f"ƒêi·ªÉm ƒë√£ ki·∫øm ƒë∆∞·ª£c: {result.get('points', 0)}")
                    return True, result.get("points", 0)
                else:
                    print(Fore.RED + f"‚ùå L·ªói nhi·ªám v·ª• {task_id}: {result.get('error', 'Kh√¥ng r√µ l·ªói')}")
                    return False, 0
            except requests.exceptions.JSONDecodeError:
                print(Fore.RED + "L·ªói: Ph·∫£n h·ªìi kh√¥ng ph·∫£i JSON. N·ªôi dung nh·∫≠n ƒë∆∞·ª£c l√†:")
                print(Fore.YELLOW + response.text)
                return False, 0
        else:
            print(Fore.RED + f"‚ùå L·ªói khi th·ª±c hi·ªán nhi·ªám v·ª• {task_id}: {response.status_code}, {response.text}")
            return False, 0
    except Exception as e:
        print(Fore.RED + f"L·ªói k·∫øt n·ªëi khi th·ª±c hi·ªán nhi·ªám v·ª•: {str(e)}")
        return False, 0

# H√†m l·∫•y cookie t·ª´ ng∆∞·ªùi d√πng
def get_cookie(platform):
    return input(Fore.MAGENTA + f"üç™ Nh·∫≠p Cookie {platform.capitalize()}: ")

# H√†m ki·ªÉm tra cookie h·ª£p l·ªá cho c√°c n·ªÅn t·∫£ng
def check_cookie(platform, cookie):
    if platform == "facebook":
        url = "https://www.facebook.com/me"
    elif platform == "instagram":
        url = "https://www.instagram.com/accounts/edit/"
    elif platform == "tiktok":
        url = "https://www.tiktok.com/@username"
    else:
        print(Fore.RED + "Platform kh√¥ng h·ª£p l·ªá.")
        return False

    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    }
    cookies = {
        "cookie": cookie
    }

    response = requests.get(url, headers=headers, cookies=cookies)

    if response.status_code == 200:
        print(Fore.GREEN + f"‚úÖ Cookie {platform.capitalize()} c√≤n s·ªëng.")
        return True
    else:
        print(Fore.RED + f"‚ùå Cookie {platform.capitalize()} ƒë√£ ch·∫øt ho·∫∑c kh√¥ng h·ª£p l·ªá.")
        return False

# H√†m li·ªát k√™ c·∫•u h√¨nh v√† y√™u c·∫ßu nh·∫≠p l·∫°i n·∫øu kh√¥ng c√≥
def list_configurations():
    if not configurations:
        print(Fore.RED + "‚ö†Ô∏è Kh√¥ng c√≥ c·∫•u h√¨nh n√†o ƒë√£ l∆∞u!")
        return None
    print(Fore.YELLOW + "--- Danh s√°ch c·∫•u h√¨nh ƒë√£ l∆∞u ---")
    for idx, config in enumerate(configurations, 1):
        print(Fore.CYAN + f"{idx}. {config['platform']} - Cookie: {config['cookie'][:20]}...")  # Hi·ªÉn th·ªã ph·∫ßn ƒë·∫ßu c·ªßa cookie
    try:
        choice = int(input(Fore.YELLOW + "Ch·ªçn c·∫•u h√¨nh (nh·∫≠p s·ªë) ƒë·ªÉ s·ª≠ d·ª•ng, ho·∫∑c 0 ƒë·ªÉ quay l·∫°i: ").strip())
        if choice == 0:
            return None
        if 1 <= choice <= len(configurations):
            return configurations[choice - 1]
        else:
            print(Fore.RED + "‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")
            return None
    except ValueError:
        print(Fore.RED + "‚ö†Ô∏è L·ªói nh·∫≠p li·ªáu. Vui l√≤ng th·ª≠ l·∫°i.")
        return None

# H√†m l∆∞u c·∫•u h√¨nh v√†o danh s√°ch
def save_configuration(platform, cookie):
    configurations.append({"platform": platform, "cookie": cookie})

# H√†m x·ª≠ l√Ω nhi·ªám v·ª• c·ªßa n·ªÅn t·∫£ng
def process_platform_tasks(platform, task_count, delay):
    print(Fore.YELLOW + f"üîÑ ƒêang x·ª≠ l√Ω nhi·ªám v·ª• cho n·ªÅn t·∫£ng: {platform.capitalize()}")
    total_tasks = 0
    total_points = 0
    for task_type in TASK_TYPES[platform]:
        print(Fore.YELLOW + f"üìå Lo·∫°i nhi·ªám v·ª•: {task_type}")
        tasks = get_tasks(task_type)
        if tasks:
            for task in tasks[:task_count]:  # L·∫•y s·ªë nhi·ªám v·ª• theo y√™u c·∫ßu
                task_id = task.get("id")
                if task_id:
                    success, points = perform_task(task_id, task_type)
                    if success:
                        total_tasks += 1
                        total_points += points
                        time.sleep(delay)  # Tr√°nh spam qu√° nhanh
            print(Fore.GREEN + f"‚úîÔ∏è Ho√†n th√†nh t·∫•t c·∫£ nhi·ªám v·ª• lo·∫°i {task_type}!")
        else:
            print(Fore.RED + f"Kh√¥ng c√≥ nhi·ªám v·ª• n√†o cho lo·∫°i {task_type}.")
    print(Fore.GREEN + f"‚úîÔ∏è Xong nhi·ªám v·ª• cho n·ªÅn t·∫£ng: {platform.capitalize()}")
    return total_tasks, total_points

# H√†m ƒëƒÉng nh·∫≠p v√† l·∫•y th√¥ng tin
def login():
    global API_KEY, USER_NAME
    while True:
        API_KEY = input(Fore.MAGENTA + "üîë Nh·∫≠p API Key t·ª´ traodoisub.com: ").strip()
        USER_NAME = get_username(API_KEY)
        if USER_NAME:
            print(Fore.GREEN + f"ƒêƒÉng nh·∫≠p th√†nh c√¥ng! Ch√†o {USER_NAME}")
            break
        else:
            print(Fore.RED + "L·ªói: API Key kh√¥ng h·ª£p l·ªá, vui l√≤ng th·ª≠ l·∫°i!")

# H√†m hi·ªÉn th·ªã menu v√† l·ª±a ch·ªçn c√¥ng c·ª•
def main_menu():
    global API_KEY
    while True:
        os.system('cls' if os.name == 'nt' else 'clear')  # X√≥a h·∫øt terminal
        print(Fore.CYAN + "--- TOOL T·ª∞ ƒê·ªòNG TRAODOISUB ---")
        print(Fore.GREEN + "1.1 - Facebook")
        print(Fore.GREEN + "1.2 - Instagram")
        print(Fore.GREEN + "1.3 - TikTok")
        print(Fore.RED + "0 - Tho√°t")
        
        try:
            choice = input(Fore.YELLOW + "Ch·ªçn c√¥ng c·ª• b·∫°n mu·ªën s·ª≠ d·ª•ng: ").strip()
            
            if choice == "1.1":
                platform = "facebook"
                cookie = get_cookie(platform)
                if check_cookie(platform, cookie):
                    save_configuration(platform, cookie)
            elif choice == "1.2":
                platform = "instagram"
                cookie = get_cookie(platform)
                if check_cookie(platform, cookie):
                    save_configuration(platform, cookie)
            elif choice == "1.3":
                platform = "tiktok"
                cookie = get_cookie(platform)
                if check_cookie(platform, cookie):
                    save_configuration(platform, cookie)
            elif choice == "0":
                break
            else:
                print(Fore.RED + "‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Th·ª≠ l·∫°i.")
        except Exception as e:
            print(Fore.RED + f"L·ªói: {str(e)}")

# H√†m ch√≠nh
if __name__ == "__main__":
    login()
    main_menu()
